# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _cSMI
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class CDataStack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDataStack, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cSMI.delete_CDataStack
    __del__ = lambda self : None;
    def getWidth(*args): return _cSMI.CDataStack_getWidth(*args)
    def getHeight(*args): return _cSMI.CDataStack_getHeight(*args)
    def getDepth(*args): return _cSMI.CDataStack_getDepth(*args)
    def getNumChannels(*args): return _cSMI.CDataStack_getNumChannels(*args)
    def getZPos(*args): return _cSMI.CDataStack_getZPos(*args)
    def setZPos(*args): return _cSMI.CDataStack_setZPos(*args)
    def getXPos(*args): return _cSMI.CDataStack_getXPos(*args)
    def setXPos(*args): return _cSMI.CDataStack_setXPos(*args)
    def getYPos(*args): return _cSMI.CDataStack_getYPos(*args)
    def setYPos(*args): return _cSMI.CDataStack_setYPos(*args)
    def nextZ(*args): return _cSMI.CDataStack_nextZ(*args)
    def getValue(*args): return _cSMI.CDataStack_getValue(*args)
    def getChannelSlice(*args): return _cSMI.CDataStack_getChannelSlice(*args)
    def getCurrentChannelSlice(*args): return _cSMI.CDataStack_getCurrentChannelSlice(*args)
    def getChannel(*args): return _cSMI.CDataStack_getChannel(*args)
    __swig_getmethods__["numberOfAvailableSlices"] = lambda x: _cSMI.CDataStack_numberOfAvailableSlices
    if _newclass:numberOfAvailableSlices = staticmethod(_cSMI.CDataStack_numberOfAvailableSlices)
    def getChannelName(*args): return _cSMI.CDataStack_getChannelName(*args)
    def setChannelName(*args): return _cSMI.CDataStack_setChannelName(*args)
    __swig_getmethods__["OpenFromFile"] = lambda x: _cSMI.CDataStack_OpenFromFile
    if _newclass:OpenFromFile = staticmethod(_cSMI.CDataStack_OpenFromFile)
    def SaveToFile(*args): return _cSMI.CDataStack_SaveToFile(*args)
    def __init__(self, *args): 
        this = _cSMI.new_CDataStack(*args)
        try: self.this.append(this)
        except: self.this = this
CDataStack_swigregister = _cSMI.CDataStack_swigregister
CDataStack_swigregister(CDataStack)
CDataStack_numberOfAvailableSlices = _cSMI.CDataStack_numberOfAvailableSlices
CDataStack_OpenFromFile = _cSMI.CDataStack_OpenFromFile

class CBaseRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBaseRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBaseRenderer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _cSMI.delete_CBaseRenderer
    __del__ = lambda self : None;
    def Render(*args): return _cSMI.CBaseRenderer_Render(*args)
    def setDispOpts(*args): return _cSMI.CBaseRenderer_setDispOpts(*args)
CBaseRenderer_swigregister = _cSMI.CBaseRenderer_swigregister
CBaseRenderer_swigregister(CBaseRenderer)

class CLUT_RGBRenderer(CBaseRenderer):
    __swig_setmethods__ = {}
    for _s in [CBaseRenderer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLUT_RGBRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [CBaseRenderer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLUT_RGBRenderer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cSMI.new_CLUT_RGBRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cSMI.delete_CLUT_RGBRenderer
    __del__ = lambda self : None;
    def Render(*args): return _cSMI.CLUT_RGBRenderer_Render(*args)
    def pyRender(*args): return _cSMI.CLUT_RGBRenderer_pyRender(*args)
CLUT_RGBRenderer_swigregister = _cSMI.CLUT_RGBRenderer_swigregister
CLUT_RGBRenderer_swigregister(CLUT_RGBRenderer)

class CDisplayParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDisplayParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDisplayParams, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    SLICE_XY = _cSMI.CDisplayParams_SLICE_XY
    SLICE_XZ = _cSMI.CDisplayParams_SLICE_XZ
    SLICE_YZ = _cSMI.CDisplayParams_SLICE_YZ
    UPRIGHT = _cSMI.CDisplayParams_UPRIGHT
    ROT90 = _cSMI.CDisplayParams_ROT90
    __swig_destroy__ = _cSMI.delete_CDisplayParams
    __del__ = lambda self : None;
    def getDisp1Chan(*args): return _cSMI.CDisplayParams_getDisp1Chan(*args)
    def getDisp2Chan(*args): return _cSMI.CDisplayParams_getDisp2Chan(*args)
    def getDisp3Chan(*args): return _cSMI.CDisplayParams_getDisp3Chan(*args)
    def getDisp1Gain(*args): return _cSMI.CDisplayParams_getDisp1Gain(*args)
    def getDisp2Gain(*args): return _cSMI.CDisplayParams_getDisp2Gain(*args)
    def getDisp3Gain(*args): return _cSMI.CDisplayParams_getDisp3Gain(*args)
    def getDisp1Off(*args): return _cSMI.CDisplayParams_getDisp1Off(*args)
    def getDisp2Off(*args): return _cSMI.CDisplayParams_getDisp2Off(*args)
    def getDisp3Off(*args): return _cSMI.CDisplayParams_getDisp3Off(*args)
    def getOrientation(*args): return _cSMI.CDisplayParams_getOrientation(*args)
    def getSliceAxis(*args): return _cSMI.CDisplayParams_getSliceAxis(*args)
CDisplayParams_swigregister = _cSMI.CDisplayParams_swigregister
CDisplayParams_swigregister(CDisplayParams)

class CDisplayOpts(CDisplayParams):
    __swig_setmethods__ = {}
    for _s in [CDisplayParams]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDisplayOpts, name, value)
    __swig_getmethods__ = {}
    for _s in [CDisplayParams]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDisplayOpts, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cSMI.new_CDisplayOpts(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cSMI.delete_CDisplayOpts
    __del__ = lambda self : None;
    def getDisp1Chan(*args): return _cSMI.CDisplayOpts_getDisp1Chan(*args)
    def getDisp2Chan(*args): return _cSMI.CDisplayOpts_getDisp2Chan(*args)
    def getDisp3Chan(*args): return _cSMI.CDisplayOpts_getDisp3Chan(*args)
    def getDisp1Gain(*args): return _cSMI.CDisplayOpts_getDisp1Gain(*args)
    def getDisp2Gain(*args): return _cSMI.CDisplayOpts_getDisp2Gain(*args)
    def getDisp3Gain(*args): return _cSMI.CDisplayOpts_getDisp3Gain(*args)
    def getDisp1Off(*args): return _cSMI.CDisplayOpts_getDisp1Off(*args)
    def getDisp2Off(*args): return _cSMI.CDisplayOpts_getDisp2Off(*args)
    def getDisp3Off(*args): return _cSMI.CDisplayOpts_getDisp3Off(*args)
    def getOrientation(*args): return _cSMI.CDisplayOpts_getOrientation(*args)
    def setDisp1Chan(*args): return _cSMI.CDisplayOpts_setDisp1Chan(*args)
    def setDisp2Chan(*args): return _cSMI.CDisplayOpts_setDisp2Chan(*args)
    def setDisp3Chan(*args): return _cSMI.CDisplayOpts_setDisp3Chan(*args)
    def setDisp1Gain(*args): return _cSMI.CDisplayOpts_setDisp1Gain(*args)
    def setDisp2Gain(*args): return _cSMI.CDisplayOpts_setDisp2Gain(*args)
    def setDisp3Gain(*args): return _cSMI.CDisplayOpts_setDisp3Gain(*args)
    def setDisp1Off(*args): return _cSMI.CDisplayOpts_setDisp1Off(*args)
    def setDisp2Off(*args): return _cSMI.CDisplayOpts_setDisp2Off(*args)
    def setDisp3Off(*args): return _cSMI.CDisplayOpts_setDisp3Off(*args)
    def setOrientation(*args): return _cSMI.CDisplayOpts_setOrientation(*args)
    def getSliceAxis(*args): return _cSMI.CDisplayOpts_getSliceAxis(*args)
    def setSliceAxis(*args): return _cSMI.CDisplayOpts_setSliceAxis(*args)
    def Optimise(*args): return _cSMI.CDisplayOpts_Optimise(*args)
CDisplayOpts_swigregister = _cSMI.CDisplayOpts_swigregister
CDisplayOpts_swigregister(CDisplayOpts)

class LineProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineProfile, name)
    __repr__ = _swig_repr
    X = _cSMI.LineProfile_X
    Y = _cSMI.LineProfile_Y
    Z = _cSMI.LineProfile_Z
    def __init__(self, *args): 
        this = _cSMI.new_LineProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cSMI.delete_LineProfile
    __del__ = lambda self : None;
    def __len__(*args): return _cSMI.LineProfile___len__(*args)
    def __getitem__(*args): return _cSMI.LineProfile___getitem__(*args)
LineProfile_swigregister = _cSMI.LineProfile_swigregister
LineProfile_swigregister(LineProfile)


CDataStack_AsArray = _cSMI.CDataStack_AsArray

