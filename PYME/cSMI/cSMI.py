# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cSMI', [dirname(__file__)])
        except ImportError:
            import _cSMI
            return _cSMI
        if fp is not None:
            try:
                _mod = imp.load_module('_cSMI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cSMI = swig_import_helper()
    del swig_import_helper
else:
    import _cSMI
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class CDataStack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDataStack, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cSMI.delete_CDataStack
    __del__ = lambda self : None;
    def getWidth(self): return _cSMI.CDataStack_getWidth(self)
    def getHeight(self): return _cSMI.CDataStack_getHeight(self)
    def getDepth(self): return _cSMI.CDataStack_getDepth(self)
    def getNumChannels(self): return _cSMI.CDataStack_getNumChannels(self)
    def getZPos(self): return _cSMI.CDataStack_getZPos(self)
    def setZPos(self, *args): return _cSMI.CDataStack_setZPos(self, *args)
    def getXPos(self): return _cSMI.CDataStack_getXPos(self)
    def setXPos(self, *args): return _cSMI.CDataStack_setXPos(self, *args)
    def getYPos(self): return _cSMI.CDataStack_getYPos(self)
    def setYPos(self, *args): return _cSMI.CDataStack_setYPos(self, *args)
    def nextZ(self): return _cSMI.CDataStack_nextZ(self)
    def getValue(self, *args): return _cSMI.CDataStack_getValue(self, *args)
    def getChannelSlice(self, *args): return _cSMI.CDataStack_getChannelSlice(self, *args)
    def getCurrentChannelSlice(self, *args): return _cSMI.CDataStack_getCurrentChannelSlice(self, *args)
    def getChannel(self, *args): return _cSMI.CDataStack_getChannel(self, *args)
    __swig_getmethods__["numberOfAvailableSlices"] = lambda x: _cSMI.CDataStack_numberOfAvailableSlices
    if _newclass:numberOfAvailableSlices = staticmethod(_cSMI.CDataStack_numberOfAvailableSlices)
    def getChannelName(self, *args): return _cSMI.CDataStack_getChannelName(self, *args)
    def setChannelName(self, *args): return _cSMI.CDataStack_setChannelName(self, *args)
    __swig_getmethods__["OpenFromFile"] = lambda x: _cSMI.CDataStack_OpenFromFile
    if _newclass:OpenFromFile = staticmethod(_cSMI.CDataStack_OpenFromFile)
    def SaveToFile(self, *args): return _cSMI.CDataStack_SaveToFile(self, *args)
    def __init__(self, *args): 
        this = _cSMI.new_CDataStack(*args)
        try: self.this.append(this)
        except: self.this = this
CDataStack_swigregister = _cSMI.CDataStack_swigregister
CDataStack_swigregister(CDataStack)

def CDataStack_numberOfAvailableSlices(*args):
  return _cSMI.CDataStack_numberOfAvailableSlices(*args)
CDataStack_numberOfAvailableSlices = _cSMI.CDataStack_numberOfAvailableSlices

def CDataStack_OpenFromFile(*args):
  return _cSMI.CDataStack_OpenFromFile(*args)
CDataStack_OpenFromFile = _cSMI.CDataStack_OpenFromFile

class CBaseRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBaseRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBaseRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cSMI.delete_CBaseRenderer
    __del__ = lambda self : None;
    def Render(self, *args): return _cSMI.CBaseRenderer_Render(self, *args)
    def setDispOpts(self, *args): return _cSMI.CBaseRenderer_setDispOpts(self, *args)
CBaseRenderer_swigregister = _cSMI.CBaseRenderer_swigregister
CBaseRenderer_swigregister(CBaseRenderer)

class CLUT_RGBRenderer(CBaseRenderer):
    __swig_setmethods__ = {}
    for _s in [CBaseRenderer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLUT_RGBRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [CBaseRenderer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLUT_RGBRenderer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cSMI.new_CLUT_RGBRenderer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cSMI.delete_CLUT_RGBRenderer
    __del__ = lambda self : None;
    def Render(self, *args): return _cSMI.CLUT_RGBRenderer_Render(self, *args)
    def pyRender(self, *args): return _cSMI.CLUT_RGBRenderer_pyRender(self, *args)
CLUT_RGBRenderer_swigregister = _cSMI.CLUT_RGBRenderer_swigregister
CLUT_RGBRenderer_swigregister(CLUT_RGBRenderer)

class CDisplayParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDisplayParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDisplayParams, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SLICE_XY = _cSMI.CDisplayParams_SLICE_XY
    SLICE_XZ = _cSMI.CDisplayParams_SLICE_XZ
    SLICE_YZ = _cSMI.CDisplayParams_SLICE_YZ
    UPRIGHT = _cSMI.CDisplayParams_UPRIGHT
    ROT90 = _cSMI.CDisplayParams_ROT90
    __swig_destroy__ = _cSMI.delete_CDisplayParams
    __del__ = lambda self : None;
    def getDisp1Chan(self): return _cSMI.CDisplayParams_getDisp1Chan(self)
    def getDisp2Chan(self): return _cSMI.CDisplayParams_getDisp2Chan(self)
    def getDisp3Chan(self): return _cSMI.CDisplayParams_getDisp3Chan(self)
    def getDisp1Gain(self): return _cSMI.CDisplayParams_getDisp1Gain(self)
    def getDisp2Gain(self): return _cSMI.CDisplayParams_getDisp2Gain(self)
    def getDisp3Gain(self): return _cSMI.CDisplayParams_getDisp3Gain(self)
    def getDisp1Off(self): return _cSMI.CDisplayParams_getDisp1Off(self)
    def getDisp2Off(self): return _cSMI.CDisplayParams_getDisp2Off(self)
    def getDisp3Off(self): return _cSMI.CDisplayParams_getDisp3Off(self)
    def getOrientation(self): return _cSMI.CDisplayParams_getOrientation(self)
    def getFlip(self, *args): return _cSMI.CDisplayParams_getFlip(self, *args)
    def getSliceAxis(self): return _cSMI.CDisplayParams_getSliceAxis(self)
CDisplayParams_swigregister = _cSMI.CDisplayParams_swigregister
CDisplayParams_swigregister(CDisplayParams)

class CDisplayOpts(CDisplayParams):
    __swig_setmethods__ = {}
    for _s in [CDisplayParams]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDisplayOpts, name, value)
    __swig_getmethods__ = {}
    for _s in [CDisplayParams]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDisplayOpts, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cSMI.new_CDisplayOpts()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cSMI.delete_CDisplayOpts
    __del__ = lambda self : None;
    def getDisp1Chan(self): return _cSMI.CDisplayOpts_getDisp1Chan(self)
    def getDisp2Chan(self): return _cSMI.CDisplayOpts_getDisp2Chan(self)
    def getDisp3Chan(self): return _cSMI.CDisplayOpts_getDisp3Chan(self)
    def getDisp1Gain(self): return _cSMI.CDisplayOpts_getDisp1Gain(self)
    def getDisp2Gain(self): return _cSMI.CDisplayOpts_getDisp2Gain(self)
    def getDisp3Gain(self): return _cSMI.CDisplayOpts_getDisp3Gain(self)
    def getDisp1Off(self): return _cSMI.CDisplayOpts_getDisp1Off(self)
    def getDisp2Off(self): return _cSMI.CDisplayOpts_getDisp2Off(self)
    def getDisp3Off(self): return _cSMI.CDisplayOpts_getDisp3Off(self)
    def getOrientation(self): return _cSMI.CDisplayOpts_getOrientation(self)
    def setDisp1Chan(self, *args): return _cSMI.CDisplayOpts_setDisp1Chan(self, *args)
    def setDisp2Chan(self, *args): return _cSMI.CDisplayOpts_setDisp2Chan(self, *args)
    def setDisp3Chan(self, *args): return _cSMI.CDisplayOpts_setDisp3Chan(self, *args)
    def setDisp1Gain(self, *args): return _cSMI.CDisplayOpts_setDisp1Gain(self, *args)
    def setDisp2Gain(self, *args): return _cSMI.CDisplayOpts_setDisp2Gain(self, *args)
    def setDisp3Gain(self, *args): return _cSMI.CDisplayOpts_setDisp3Gain(self, *args)
    def setDisp1Off(self, *args): return _cSMI.CDisplayOpts_setDisp1Off(self, *args)
    def setDisp2Off(self, *args): return _cSMI.CDisplayOpts_setDisp2Off(self, *args)
    def setDisp3Off(self, *args): return _cSMI.CDisplayOpts_setDisp3Off(self, *args)
    def setOrientation(self, *args): return _cSMI.CDisplayOpts_setOrientation(self, *args)
    def getFlip(self, *args): return _cSMI.CDisplayOpts_getFlip(self, *args)
    def setFlip(self, *args): return _cSMI.CDisplayOpts_setFlip(self, *args)
    def getSliceAxis(self): return _cSMI.CDisplayOpts_getSliceAxis(self)
    def setSliceAxis(self, *args): return _cSMI.CDisplayOpts_setSliceAxis(self, *args)
    def Optimise(self, *args): return _cSMI.CDisplayOpts_Optimise(self, *args)
CDisplayOpts_swigregister = _cSMI.CDisplayOpts_swigregister
CDisplayOpts_swigregister(CDisplayOpts)

class LineProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineProfile, name)
    __repr__ = _swig_repr
    X = _cSMI.LineProfile_X
    Y = _cSMI.LineProfile_Y
    Z = _cSMI.LineProfile_Z
    def __init__(self, *args): 
        this = _cSMI.new_LineProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cSMI.delete_LineProfile
    __del__ = lambda self : None;
    def __len__(self): return _cSMI.LineProfile___len__(self)
    def __getitem__(self, *args): return _cSMI.LineProfile___getitem__(self, *args)
LineProfile_swigregister = _cSMI.LineProfile_swigregister
LineProfile_swigregister(LineProfile)


CDataStack_AsArray = _cSMI.CDataStack_AsArray

