import pandas as pd
import json
import sys


def build_call_tree_threads(df):
    """
    Build a multi-threaded call tree from profiling data

    Parameters
    ----------
    df : pandas DataFrame
         data frame with profile data

    Returns
    -------
    dictionary containing the call stack and thread names

    """
    out = []

    gb = df.groupby('thread')

    threadNames = gb.groups.keys()

    for threadIDX, k in enumerate(threadNames):
        print(k)
        stack = []
        level = 0

        for i, l in gb.get_group(k).iterrows():
            if 'fProfile.py' in l.file:
                pass
            #print l
            elif l.event == 'call':
                level += 1
                stack.append((l.time, l.file, l.function))
            elif l.event == 'return':
                c = stack.pop()
                out.append({'ts': c[0],
                            'f': l.file,
                            'n': l.function,
                            'tf': l.time,
                            'l': level,
                            'td': threadIDX})
                level -= 1

    return {'callstack': out, 'threadNames': threadNames}


def convert(infile='prof_spool.txt', outfile='prof_spool.json'):
    """
    Convert a profile file as generated by the fProfile module into the json format required by the viewer

    Parameters
    ----------
    infile : string
        the input file name
    outfile : string
        the output file name

    Returns
    -------

    """
    df = pd.read_csv(infile, '\t', names=['time', 'thread', 'file', 'function', 'event'])

    callstack = build_call_tree_threads(df)

    with open(outfile, 'w') as f:
        f.write(json.dumps(callstack))


if __name__ == '__main__':
    convert(sys.argv[1], sys.argv[2])
