#!/usr/bin/python

##################
# viewpanel.py
#
# Copyright David Baddeley, 2009
# d.baddeley@auckland.ac.nz
#
# This file may NOT be distributed without express permision from David Baddeley
#
##################

#!/usr/bin/env python
# generated by wxGlade 0.3.3 on Mon Jun 14 07:44:41 2004

import wx
import pylab
from PYME.Analysis.LMVis import histLimits

def fast_grey(data):
    return data[:,:,None]*pylab.ones((1,1,4))

fast_grey.name = 'fastGrey'

class OptionsPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        kwargs['style'] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, parent, *args, **kwargs)

        self.parent = parent

        vsizer = wx.BoxSizer(wx.VERTICAL)

        self.hIds = []
        self.cIds = []
        self.cbIds = []
        self.hcs = []

        cmapnames = pylab.cm.cmapnames + ['fastGrey']# + [n + '_r' for n in pylab.cm.cmapnames]
        cmapnames.sort()
        do = parent.do

        for i in range(len(do.Chans)):
            ssizer = wx.StaticBoxSizer(wx.StaticBox(self, -1, 'Chan %d' %i), wx.VERTICAL)

            id = wx.NewId()
            self.hIds.append(id)
            c = self.parent.ds[:,:,self.parent.zp,do.Chans[i]].ravel()
            hClim = histLimits.HistLimitPanel(self, id, c[::(len(c)/1e4)], do.Offs[i], do.Offs[i] + 1./do.Gains[i], size=(120, 80), log=True)

            hClim.Bind(histLimits.EVT_LIMIT_CHANGE, self.OnCLimChanged)
            self.hcs.append(hClim)

            ssizer.Add(hClim, 0, wx.ALL, 5)

            id = wx.NewId()
            self.cIds.append(id)
            cCmap = wx.Choice(self, id, choices=cmapnames)
            cCmap.SetSelection(cmapnames.index(do.cmaps[i].name))
            cCmap.Bind(wx.EVT_CHOICE, self.OnCMapChanged)
            ssizer.Add(cCmap, 0, wx.ALL, 5)

            vsizer.Add(ssizer, 0, wx.ALL, 5)

        self.bOptimise = wx.Button(self, -1, "Optimise")
        vsizer.Add(self.bOptimise, 0, wx.ALL|wx.ALIGN_CENTER, 5)

        ssizer = wx.StaticBoxSizer(wx.StaticBox(self, -1, 'Slice'), wx.VERTICAL)
        self.cbSlice = wx.Choice(self, -1, choices=["X-Y", "X-Y @ 90 Deg", "X-Z", "Y-Z"])
        self.cbSlice.SetSelection(0)
        ssizer.Add(self.cbSlice, 1, wx.ALL|wx.EXPAND, 5)

        vsizer.Add(ssizer, 0, wx.ALL|wx.EXPAND, 5)

        ssizer = wx.StaticBoxSizer(wx.StaticBox(self, -1, 'Scale'), wx.VERTICAL)
        self.cbScale = wx.Choice(self, -1, choices=["1:4", "1:2", "1:1", "2:1", "4:1"])
        self.cbScale.SetSelection(2)
        ssizer.Add(self.cbScale, 1, wx.ALL|wx.EXPAND, 5)

        vsizer.Add(ssizer, 0, wx.ALL|wx.EXPAND, 5)

        self.SetSizerAndFit(vsizer)

        self.cbSlice.Bind(wx.EVT_CHOICE, self.OnSliceChanged)
        self.cbScale.Bind(wx.EVT_CHOICE, self.OnScaleChanged)

        self.bOptimise.Bind(wx.EVT_BUTTON, self.parent.Optim)

    def OnSliceChanged(self, event):
        if (self.parent.updating == 0):
            if (self.cbSlice.GetSelection() == 0):
                self.parent.do.slice =(self.parent.do.SLICE_XY)
                self.parent.do.orientation = (self.parent.do.UPRIGHT)
            elif (self.cbSlice.GetSelection() == 1):
                self.parent.do.slice = (self.parent.do.SLICE_XY)
                self.parent.do.orientation = (self.parent.do.ROT90)
            elif (self.cbSlice.GetSelection() == 2):
                self.parent.do.slice =(self.parent.do.SLICE_XZ)
                self.parent.do.orientation=(self.parent.do.UPRIGHT)
            elif (self.cbSlice.GetSelection() == 3):
                self.parent.do.slice =(self.parent.do.SLICE_YZ)
                self.parent.do.orientation  =self.parent.do.UPRIGHT

            #self.parent.Refresh()
            self.parent.GetOpts()

    def OnScaleChanged(self, event):
        if (self.parent.updating == 0):
            self.parent.scale = self.cbScale.GetSelection()
            self.parent.GetOpts()

    def OnCLimChanged(self, event):
        #print event.GetId()
        ind = self.hIds.index(event.GetId())
        self.parent.do.Offs[ind] = event.lower
        self.parent.do.Gains[ind] = 1./(event.upper- event.lower)
        self.parent.Refresh()

    def OnCMapChanged(self, event):
        #print event.GetId()
        ind = self.cIds.index(event.GetId())

        cmn = event.GetString()

#        if self.cmap_menu.IsChecked(self.cbIds[ind]):
#            cmn = cmn + '_r'

        if cmn == 'fastGrey':
            self.parent.do.cmaps[ind] = fast_grey
        else:
            self.parent.do.cmaps[ind] = pylab.cm.__getattribute__(cmn)
            
        self.parent.Refresh()

    def RefreshHists(self):
        do = self.parent.do
        for i in range(len(do.Chans)):
            c = self.parent.ds[:,:,self.parent.zp,do.Chans[i]].ravel()
            self.hcs[i].SetData(c[::(len(c)/1e4)], do.Offs[i], do.Offs[i] + 1./do.Gains[i])




class ViewPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        vpsizer = wx.BoxSizer(wx.HORIZONTAL)

        self.imagepanel = wx.ScrolledWindow(self, -1, size=(self.ds.shape[0],self.ds.shape[1]), style=wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL)
        self.imagepanel.SetScrollRate(10, 10)
        vpsizer.Add(self.imagepanel, 1, wx.EXPAND, 0)

        self.bShowOpts = wx.Button(self, -1, "", size=wx.Size(7,-1))
        vpsizer.Add(self.bShowOpts, 0, wx.EXPAND, 0)
        
        self.optionspanel = OptionsPanel(self, -1)
        #self.optionspanel.SetScrollRate(10, 10)
        vpsizer.Add(self.optionspanel, 0, wx.EXPAND, 0)


        self.SetSizerAndFit(vpsizer)

    

   


