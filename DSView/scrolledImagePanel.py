#!/usr/bin/python

##################
# viewpanel.py
#
# Copyright David Baddeley, 2009
# d.baddeley@auckland.ac.nz
#
# This file may NOT be distributed without express permision from David Baddeley
#
##################

#!/usr/bin/env python
# generated by wxGlade 0.3.3 on Mon Jun 14 07:44:41 2004

import wx
#import pylab
#from PYME.misc import extraCMaps
#from displayOptions import DisplayOpts
#from DisplayOptionsPanel import OptionsPanel

class ImagePanel(wx.Panel):
    def __init__(self, parent, renderer, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)

        self.parent = parent
        self.renderer = renderer


        wx.EVT_PAINT(self, self.OnPaint)
        wx.EVT_ERASE_BACKGROUND(self, self.DoNix)

    def DoNix(self, event):
        pass

    def OnPaint(self,event):
        
        #self.painting = True
        DC = wx.PaintDC(self)
#        if not time.time() > (self.lastUpdateTime + 2*self.lastFrameTime): #avoid paint floods
#            if not self.refrTimer.IsRunning():
#                self.refrTimer.Start(.2, True) #make sure we do get a refresh after disposing of flood
#            return

        #frameStartTime = time.time()

        self.PrepareDC(DC)

        #x0,y0 = self.parent.CalcUnscrolledPosition(0,0)

        #s = self.imagepanel.GetVirtualSize()
        s = self.GetClientSize()
        MemBitmap = wx.EmptyBitmap(s.GetWidth(), s.GetHeight())
        #del DC
        MemDC = wx.MemoryDC()
        OldBitmap = MemDC.SelectObject(MemBitmap)
        try:
            DC.BeginDrawing()
            #DC.Clear()
            #Perform(WM_ERASEBKGND, MemDC, MemDC);
            #Message.DC := MemDC;
            self.renderer(MemDC);
            #Message.DC := 0;
            #DC.BlitXY(0, 0, s.GetWidth(), s.GetHeight(), MemDC, 0, 0)
            DC.Blit(0, 0, s.GetWidth(), s.GetHeight(), MemDC, 0, 0)
            DC.EndDrawing()
        finally:
            #MemDC.SelectObject(OldBitmap)
            del MemDC
            del MemBitmap

        #self.lastUpdateTime = time.time()
        #self.lastFrameTime = self.lastUpdateTime - frameStartTime

        #self.painting = False




class ScrolledImagePanel(wx.Panel):
    def __init__(self, parent, renderer,*args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)

        self.parent = parent
        
        self.imSize = (0,0)
        self.xOff = 0
        self.yOff = 0

        self.scrollRangeX = 0
        self.scrollRangeY = 0

        gridSizer = wx.FlexGridSizer(2)

        self.imagepanel = ImagePanel(self, renderer, -1, size = self.Size)
        gridSizer.Add(self.imagepanel, 1, wx.EXPAND, 0)

        self.scrollY = wx.ScrollBar(self, -1, style=wx.SB_VERTICAL)
        gridSizer.Add(self.scrollY, 0, wx.EXPAND, 0)

        self.scrollX = wx.ScrollBar(self, -1)
        gridSizer.Add(self.scrollX, 0, wx.EXPAND, 0)

        gridSizer.AddGrowableRow(0)
        gridSizer.AddGrowableCol(0)

        self.SetSizer(gridSizer)

        self.scrollX.Bind(wx.EVT_COMMAND_SCROLL, self.OnScrollX)
        self.scrollY.Bind(wx.EVT_COMMAND_SCROLL, self.OnScrollY)

        wx.EVT_SIZE(self, self.OnSize)


    def CalcUnscrolledPosition(self, x, y):
        return x + self.xOff, y + self.yOff

    def SetVirtualSize(self,size):
        self.imSize = size
        
        self.RefreshScrollbars()


    def RefreshScrollbars(self):
        self.scrollRangeX = max(0, self.imSize[0] - self.imagepanel.Size[0])
        self.xOff = min(self.xOff, self.scrollRangeX)
        self.scrollX.SetScrollbar(self.xOff, max(1,  self.scrollRangeX*self.imagepanel.Size[0]/max(1, self.imSize[0])), self.scrollRangeX, 10)

        self.scrollRangeY = max(0, self.imSize[1] - self.imagepanel.Size[1])
        self.yOff = min(self.yOff, self.scrollRangeY)
        self.scrollY.SetScrollbar(self.yOff, max(1,  self.scrollRangeY*self.imagepanel.Size[1]/max(1, self.imSize[1])), self.scrollRangeY, 10)

        if self.imSize[0] < self.imagepanel.Size[0]: #don't need scrollbar
            self.scrollX.Hide()
        else:
            self.scrollX.Show()

        if self.imSize[1] < self.imagepanel.Size[1]: #don't need scrollbar
            self.scrollY.Hide()
        else:
            self.scrollY.Show()

        self.Layout()
        self.imagepanel.Refresh()

#    def GetClientSize(self):
#        return self.imagepanel.Get
#        pass

    def GetScrollPixelsPerUnit(self):
        return (1,1)

    def OnScrollX(self,event):
        self.xOff = event.GetPosition()

        self.imagepanel.Refresh()

    def OnScrollY(self,event):
        self.yOff = event.GetPosition()
        print self.yOff

        self.imagepanel.Refresh()

    def OnSize(self, event):
        self.Layout()
        self.RefreshScrollbars()
        event.Skip()

    def Scroll(self, dx, dy):
        self.xOff += dx
        self.yOff += dy

        self.RefreshScrollbars()


    

   


